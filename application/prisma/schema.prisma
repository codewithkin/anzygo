datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  public        Boolean   @default(true)
  name          String   @default(uuid())// Optional, user can set it later
  image         String   @default("https://wallpapercave.com/fuwp-255/uwp4475855.png") // Optional, profile picture
  bio           String   @default("") // Optional, short user bio
  status        String   @default("Away") // Optional, e.g., "Online", "Away"
  theme         String   @default("Default")// Optional, user-selected theme
  settings      Json? // Optional, stores user preferences

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  chats    ChatUser[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth Models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Chat {
  id        String     @id @default(cuid())
  type      String     // "private" | "group"
  name      String?    // For group chats
  image     String?    // Group chat image
  messages  Message[]
  chatUsers ChatUser[] // ✅ Correct Many-to-Many Relationship
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ChatUser {
  id        String  @id @default(cuid())
  userId    String
  chatId    String
  role      String  // "admin" | "member"
  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, userId]) // ✅ Prevents duplicate users in the same chat
}


model Message {
  id       String  @id @default(cuid())
  chatId   String
  senderId String
  content  String?
  type     String // "text" | "image" | "video" | "file"
  mediaId  String? // If there's an attachment
  readBy   Json? // Array of userIds who read the message
  sender   User    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat     Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  media    Media[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String // "image" | "video" | "file"
  messageId String?
  message   Message? @relation(fields: [id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}